### Vivado project

$ cd ~/work/embedded_linux/vivado
$ vivado -nolog -nojournal -mode batch -source embedded_linux.tcl

### Compile FSBL

$ vivado -nolog -nojournal -mode batch -source hwdef.tcl
$ hsi -nolog -nojournal -mode batch -source fsbl.tcl

### Generate Device Tree

$ hsi -nolog -nojournal -mode batch -source devicetree.tcl


### Development packages install

$ sudo apt-get install openssh-server vim wget unzip
$ sudo apt-get install build-essential gcc-arm-linux-gnueabihf device-tree-compiler u-boot-tools libncurses5-dev libssl-dev
$ sudo apt-get install parted coreutils qemu qemu-user-static

### U-BOOT compile

$ cd ~/work/embedded_linux
$ mkdir -p dl
$ wget https://github.com/Xilinx/u-boot-xlnx/archive/xilinx-v2016.4.tar.gz -O dl/u-boot-xlnx-xilinx-v2016.4.tar.gz
$ cd u-boot
$ tar xvzf ../dl/u-boot-xlnx-xilinx-v2016.4.tar.gz
$ cd u-boot-xlnx-xilinx-v2016.4

$ cp ../zynq-zyboc.dts arch/arm/dts
$ cp ../zynq_zyboc.h include/configs
$ cp ../zynq_zyboc_defconfig configs

$ vi arch/arm/dts/Makefile

dtb-$(CONFIG_ARCH_ZYNQ) += zynq-zc702.dtb \
    zynq-zc706.dtb \
    zynq-zed.dtb \
    zynq-zybo.dtb \
    zynq-microzed.dtb \
    zynq-cc108.dtb \
    zynq-afx-nand.dtb \
    zynq-afx-nor.dtb \
    zynq-afx-qspi.dtb \
    zynq-cse-nand.dtb \
    zynq-cse-nor.dtb \
    zynq-cse-qspi.dtb \
    zynq-picozed.dtb \
    zynq-zc770-xm010.dtb \
    zynq-zc770-xm011.dtb \
    zynq-zc770-xm012.dtb \
-   zynq-zc770-xm013.dtb
+   zynq-zc770-xm013.dtb \
+   zynq-zyboc.dtb

$ make ARCH=arm zynq_zyboc_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- CFLAGS="-O2 -march=armv7-a -mcpu=cortex-a9 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard" all
$ cp u-boot ~/work/embedded_linux/vivado/u-boot.elf

### Device Tree compile

$ cd ~/work/embedded_linux
$ cp vivado/embedded_linux/embedded_linux.tree/system.dts .
$ vi system.dts

&clkc {
    fclk-enable = <0x0>;
    ps-clk-frequency = <50000000>;
};

+&i2c0 {
+    eeprom@50 {
+        /* Microchip 24AA02E48 */
+        compatible = "microchip,24c02";
+        reg = <0x50>;
+        pagesize = <8>;
+    };
+};
+/ {
+    usb_phy0: phy0 {
+        compatible = "ulpi-phy";
+        #phy-cells = <0>;
+        reg = <0xe0002000 0x1000>;
+        view-port = <0x0170>;
+        drv-vbus;
+    };
+};
+&usb0 {
+    usb-phy = <&usb_phy0>;
+};

$ dtc -O dtb -I dts -i vivado/embedded_linux/embedded_linux.tree/ -o devicetree.dtb system.dts

### Linux Kernel compile

$ cd ~/work/embedded_linux
$ wget https://github.com/Xilinx/linux-xlnx/archive/xilinx-v2016.4.tar.gz -O dl/linux-xlnx-xilinx-v2016.4.tar.gz
$ cd kernel
$ tar xvzf ../dl/linux-xlnx-xilinx-v2016.4.tar.gz
$ cd linux-xlnx-xilinx-v2016.4

<option 1>
$ make ARCH=arm xilinx_zynq_defconfig
$ make ARCH=arm menuconfig

Networking support -> Wireless
<*> cfg80211 - wireless configuration API ===> CONFIG_CFG80211=y
<*> Generic IEEE 802.11 Networking Stack (mac80211) ===> CONFIG_MAC80211=y

Device Drivers -> Device Tree and Open Firmware support
[*] Device Tree overlays  ===> CONFIG_OF_OVERLAY=y

Device Drivers -> Network device support -> Wireless LAN 
<> Realtek rtlwifi family of devices ===> CONFIG_RTL_CARDS=y

Device Drivers
[*] Staging drivers ===> CONFIG_STAGING

Device Drivers -> Staging drivers
<*> Realtek RTL8188EU Wireless LAN NIC driver ===> CONFIG_R8188EU
[*] Realtek RTL8188EU AP mode (NEW) ===> CONFIG_88EU_AP_MODE

Device Drivers -> SPI support
<*> GPIO-based bitbanging SPI Master ===> CONFIG_SPI_GPIO
<*> User mode SPI device driver support ===> CONFIG_SPI_SPIDEV=y

Device Drivers -> GPIO support -> Memory mapped GPIO drivers
<*> Xilinx GPIO support ===> CONFIG_GPIO_XILINX=y

Device Drivers -> I2C support -> I2C Hardware Bus support
<*> Xilinx I2C Controller ===> CONFIG_I2C_XILINX

Device Drivers -> Character devices -> Serial drivers
<*> Xilinx uartlite serial port support ===> CONFIG_SERIAL_UARTLITE
[*]   Support for console on Xilinx uartlite serial port ===>CONFIG_SERIAL_UARTLITE_CONSOLE

Device Drivers -> Multimedia support
[*] Media USB Adapters ===> CONFIG_MEDIA_USB_SUPPORT=y

Device Drivers -> Multimedia support -> Media USB Adapter
<*> USB Video Class (UVC) ===> CONFIG_USB_VIDEO_CLASS=y
[*] UVC input events device support (NEW) ===> CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV=y

<option 2>
$ cp ../my_zynq_defconfig arch/arm/configs
$ make ARCH=arm my_zynq_defconfig


$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- CFLAGS="-O2 -march=armv7-a -mcpu=cortex-a9 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard" -j $(nproc)  UIMAGE_LOADADDR=0x8000 uImage
$ cp arch/arm/boot/uImage ../..

$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- CFLAGS="-O2 -march=armv7-a -mcpu=cortex-a9 -mtune=cortex-a9 -mfpu=neon -mfloat-abi=hard" -j $(nproc) modules

$ mkdir ../modules
$ make  ARCH=arm INSTALL_MOD_PATH=../modules modules_install
$ cd ..
$ rm modules/lib/modules/4.6.0-xilinx/{build,source}
$ tar cvzf modules.tar.gz modules/*
$ rm -fr modules
$ mv modules.tar.gz ..

### Boot.bin build

$ cd ~/work/embedded_linux/vivado
$ tclsh bootbin.tcl
$ cp boot.bin ..

### SD Card Image(only Root File System) build

$ cd ~/work/embedded_linux
$ sudo sh ./image.sh
$ sudo dd if=img/ubuntu_armhf_16.04.imag of=/dev/sdc bs=4M
$ sudo sync

### Post install

>>> console login
# groupadd -g 1000 hokim
# groupadd -g 1001 admin
# useradd -u 1000 -g 1000 -G adm,dialout,cdrom,audio,dip,video,plugdev,admin -d /home/hokim -m -s /bin/bash hokim
# passwd hokim

# vi /etc/sudoers
%admin ALL=(ALL) ALL
+hokim ALL=(ALL) NOPASSWD: ALL

# vi /etc/network/interfaces.d/eth0

allow-hotplug eth0
iface eth0 inet static
address 192.168.10.10
netmask 255.255.255.0

# halt
<<< console logout

s scp modules.tar.gz hokim@192.168.10.10:.

>>> ssh login
$ ssh hokim@192.168.10.10

$ sudo tar xvzf modules.tar.gz --strip-components=1 --no-same-owner -C /
$ rm modules.tar.gz

$ sudo vi /etc/hostname
-localhost.localdomain
+zybo

$ sudo vi /etc/hosts

127.0.0.1       localhost
127.0.1.1       zybo

# The following lines are desirable for IPv6 capable hosts
::1             ip6-localhost ip6-loopback
fe00::0         ip6-localnet
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

$ ls /sys/class/net

enx74da38422193  eth0  lo

$ sudo vi /etc/network/interfaces.d/enx74da38422193

allow-hotplug enx74da38422193
iface enx74da38422193 inet dhcp
        pre-up wpa_supplicant -B -D wext -i enx74da38422193 -c /etc/wpa_supplicant.conf
        post-down killall -q wpa_supplicant
        udhcpc_opts -t7 -T3

$ sudo vi /etc/wpa_supplicant.conf 

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
	ssid="INIPRO"
	key_mgmt=WPA-PSK
	psk="20471047"
}



$ sudo halt
<<< ssh logout

### How to update SD Car Image (Example)

$ fdisk -l img/ubuntu_armhf_16.04.img

Disk img/ubuntu-core_armhf_16.04.img: 3.4 GiB, 3670016000 bytes, 7168000 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xa9fa50e3

Device                           Boot  Start     End Sectors  Size Id Type
img/ubuntu-core_armhf_16.04.img1        8192  249855  241664  118M  e W95 FAT16 
img/ubuntu-core_armhf_16.04.img2      249856 7167999 6918144  3.3G 83 Linux

$ mkdir root
$ sudo mount -o rw,loop,offset=$(echo '249856*512'|bc) -t auto img/ubuntu-core_armhf_16.04.img root

$ sudo -s
# cp /etc/resolv.conf root/etc/
# cp /usr/bin/qemu-arm-static root/usr/bin/

# chroot root
# apt-get install lubuntu-desktop
# exit

# rm root/etc/resolv.conf
# rm root/usr/bin/qemu-arm-static
# umount root
# exit


### Resize SD filesystem 

>>> ssh login
$ ssh hokim@192.168.10.10
$ sudo -s
# echo -e "d\n2\nw" | fdisk /dev/mmcblk0
# parted -s /dev/mmcblk0 mkpart primary ext4 128M 100%
# halt
<<< ssh logout

$ sudo resize2fs /dev/mmcblk0p2

### Make kernel module
$ cd ~/work/embedded_linux/kernel/linux-xlnx-xilinx-v2016.3
$ scp Module.symvers hokim@192.168.10.10

>> ssh login
$ ssh hokim@192.168.10.10
$ wget https://github.com/Xilinx/linux-xlnx/archive/xilinx-v2016.3.tar.gz -O linux-xlnx-xilinx-v2016.3.tar.gz
$ tar xvzf linux-xlnx-xilinx-v2016.3.tar.gz
$ cd linux-xlnx-xilinx-v2016.3
$ zcat /proc/config.gz > .config
$ make oldconfig
$ make modules_prepare
$ vi ~/.bashrc

+ export KERNELDIR=$HOME/linux-xlnx-xilinx-v2016.3

$ cp ../Module.symvers
$ mkdir ~/modules
<< ssh logout

$ cd ~/work/embedded_linux/kernel/drivers
$ scp -r rtl8192cu hokim@192.168.10.10:./modules

>> ssh login
$ cd modules/rtl8192cu
$ vi Makefile
modules:
-	$(MAKE) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) -C $(KSRC) M=$(shell pwd)  modules
+   $(MAKE) -C $(KERNELDIR) M=$(shell pwd)  modules

$ make
$ sudo mkdir -p /lib/modules/$(uname -r)/drivers
$ sudo cp 8192cu.ko /lib/modules/$(uname -r)/drivers
$ sudo depmod -a
$ sudo reboot

